
// yoshizawa

// Spritelayouts

	// H variant
		// F level
			// Norm
				spritelayout sprlay_yoshizawa_h_f_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_yoshizawa_h_f_norm (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // fence
						sprite: spr_yoshizawa_h_f_fence_norm (construction_state); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(2);
					}
					childsprite { // trees
						sprite: spr_yoshizawa_h_f_trees_norm (LOAD_TEMP(3)); // Seasonal
					}
				}

			// Snow
				spritelayout sprlay_yoshizawa_h_f_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_yoshizawa_h_f_snow (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // fence
						sprite: spr_yoshizawa_h_f_fence_snow (construction_state); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(2);
					}
					childsprite { // trees
						sprite: spr_yoshizawa_h_f_trees_snow (3); // Seasonal, but winter tree in the snow
					}
				}

		// G level
			// Norm
				spritelayout sprlay_yoshizawa_h_g_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_yoshizawa_h_g_norm (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // fence
						sprite: spr_yoshizawa_h_g_fence_norm (construction_state); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(2);
					}
					childsprite { // trees
						sprite: spr_yoshizawa_h_g_trees_norm (LOAD_TEMP(3)); // Seasonal
					}
				}

			// Snow
				spritelayout sprlay_yoshizawa_h_g_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_yoshizawa_h_g_snow (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // fence
						sprite: spr_yoshizawa_h_g_fence_snow (construction_state); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(2);
					}
					childsprite { // trees
						sprite: spr_yoshizawa_h_g_trees_snow (3); // Seasonal, but winter tree in the snow
					}
				}

/*
==================
Getbits Allocation
==================
Childsprites: {'fence': {'conditions': ['single', 'remap']}, 'trees': {'conditions': ['seasonal', 'variant']}}

Colour Profiles: {'new': {'sum_prob': 8, 'count': 8}, 'old': {'sum_prob': 8, 'count': 8}, 'fence': {'sum_prob': 4, 'count': 4}}
	âœ… new colour profile has 8 unique colours, with probabilities summing to 8
	âœ… old colour profile has 8 unique colours, with probabilities summing to 8
	âœ… fence colour profile has 4 unique colours, with probabilities summing to 4

Feature		Num		Start	Bits	Storage
------------------------------------------------------------------
Levels		2		0		1		ðŸš«
Building	8		1		3		LOAD_TEMP(0)
Fence ðŸŽ¨	4		2		2		LOAD_TEMP(2)
*/

// Random Switches
	// Building Colours
		switch (FEAT_HOUSES, SELF, yoshizawa_build_clr_new, getbits(random_bits, 1, 3)) {
			0:	return 32;
			1:	return 50;
			2:	return 57;
			3:	return 58;
			4:	return 59;
			5:	return 67;
			6:	return 75;
				return 81;
		}
		switch (FEAT_HOUSES, SELF, yoshizawa_build_clr_old, getbits(random_bits, 1, 3)) {
			0:	return 17;
			1:	return 18;
			2:	return 23;
			3:	return 24;
			4:	return 25;
			5:	return 26;
			6:	return 59;
				return 60;
		}
	// Fence Colours
		switch (FEAT_HOUSES, SELF, yoshizawa_fence_clr, getbits(random_bits, 2, 2)) {
			0:	return 38;
			1:	return 39;
			2:	return 44;
				return 69;
		}
// Spritelayout Switches
	// h
		// f
			switch (FEAT_HOUSES,SELF, switch_yoshizawa_h_f_sprites, [
				STORE_TEMP((current_year - age) < 1959 ? yoshizawa_build_clr_old() : yoshizawa_build_clr_new(), 0),
				STORE_TEMP(yoshizawa_fence_clr(), 2),
				STORE_TEMP(Season(), 3),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_yoshizawa_h_f_snow; sprlay_yoshizawa_h_f_norm; }
		// g
			switch (FEAT_HOUSES,SELF, switch_yoshizawa_h_g_sprites, [
				STORE_TEMP((current_year - age) < 1959 ? yoshizawa_build_clr_old() : yoshizawa_build_clr_new(), 0),
				STORE_TEMP(yoshizawa_fence_clr(), 2),
				STORE_TEMP(Season(), 3),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_yoshizawa_h_g_snow; sprlay_yoshizawa_h_g_norm; }

	// Level Selection
		switch (FEAT_HOUSES, SELF, switch_yoshizawa_sprites, getbits(random_bits, 0, 1)) {
			0:	switch_yoshizawa_h_f_sprites;
				switch_yoshizawa_h_g_sprites;
		}

// Item Block
	item(FEAT_HOUSES, item_yoshizawa, 92, HOUSE_SIZE_1X1){
		property {
			substitute:					6;
			name:						string(NAME_YOSHIZAWA);
			population:					20;
			accepted_cargos:			[[PASS, 4],[MAIL, 2]];
			local_authority_impact:		80;
			removal_cost_multiplier:	80;
			probability:				5;
			years_available:			[1870,0xFFFF];
			minimum_lifetime:			5;
			availability_mask:			[bitmask(TOWNZONE_OUTER_SUBURB , TOWNZONE_OUTSKIRT, TOWNZONE_EDGE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE, CLIMATE_TROPIC)];
			building_class:				0;
			}
		graphics {
			default:					switch_yoshizawa_sprites;
			construction_check:			switch_single_house_con_check;
			cargo_production:			func_produce(2,1);
		}
	}
