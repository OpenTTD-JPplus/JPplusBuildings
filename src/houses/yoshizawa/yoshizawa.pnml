
// yoshizawa

// Spritelayouts

	// f
		// norm
			spritelayout sprlay_yoshizawa_h_f_norm {
				ground {
					sprite:spr_ground_grass_norm (construction_state);
					}
				building {
					sprite: spr_yoshizawa_h_f_norm (construction_state);
					recolour_mode: RECOLOUR_REMAP;
					palette: recolour_remap + LOAD_TEMP(0);
					}
				childsprite { // fence
					sprite: spr_yoshizawa_h_f_fence_norm (construction_state); // Same as building
					recolour_mode: RECOLOUR_REMAP;
					palette: recolour_remap + LOAD_TEMP(2);
				}
				childsprite { // trees
					sprite: spr_yoshizawa_h_f_trees_norm (LOAD_TEMP(3)); // Seasonal
				}
			}

		// snow
			spritelayout sprlay_yoshizawa_h_f_snow {
				ground {
					sprite:spr_ground_grass_snow (construction_state);
					}
				building {
					sprite: spr_yoshizawa_h_f_snow (construction_state);
					recolour_mode: RECOLOUR_REMAP;
					palette: recolour_remap + LOAD_TEMP(0);
					}
				childsprite { // fence
					sprite: spr_yoshizawa_h_f_fence_snow (construction_state); // Same as building
					recolour_mode: RECOLOUR_REMAP;
					palette: recolour_remap + LOAD_TEMP(2);
				}
				childsprite { // trees
					sprite: spr_yoshizawa_h_f_trees_snow (3); // Seasonal, but winter tree in the snow
				}
			}

	// g
		// norm
			spritelayout sprlay_yoshizawa_h_g_norm {
				ground {
					sprite:spr_ground_grass_norm (construction_state);
					}
				building {
					sprite: spr_yoshizawa_h_g_norm (construction_state);
					recolour_mode: RECOLOUR_REMAP;
					palette: recolour_remap + LOAD_TEMP(0);
					}
				childsprite { // fence
					sprite: spr_yoshizawa_h_g_fence_norm (construction_state); // Same as building
					recolour_mode: RECOLOUR_REMAP;
					palette: recolour_remap + LOAD_TEMP(2);
				}
				childsprite { // trees
					sprite: spr_yoshizawa_h_g_trees_norm (LOAD_TEMP(3)); // Seasonal
				}
			}

		// snow
			spritelayout sprlay_yoshizawa_h_g_snow {
				ground {
					sprite:spr_ground_grass_snow (construction_state);
					}
				building {
					sprite: spr_yoshizawa_h_g_snow (construction_state);
					recolour_mode: RECOLOUR_REMAP;
					palette: recolour_remap + LOAD_TEMP(0);
					}
				childsprite { // fence
					sprite: spr_yoshizawa_h_g_fence_snow (construction_state); // Same as building
					recolour_mode: RECOLOUR_REMAP;
					palette: recolour_remap + LOAD_TEMP(2);
				}
				childsprite { // trees
					sprite: spr_yoshizawa_h_g_trees_snow (3); // Seasonal, but winter tree in the snow
				}
			}

/*
==================
Getbits Allocation
==================
Childsprites: {'fence': {'conditions': ['single', 'remap']}, 'trees': {'conditions': ['seasonal', 'variant']}}

8 Old Colours: ['brn686Dbla0308', 'brn686Dgry050A', 'brn6A6Fbla0106', 'brn6A6Fbla0308', 'brn6A6Fbla050A', 'brn6A6Fbrn686D', 'brn2025bla0106', 'brn2025bla0308']
8 New Colours: ['gry050Abla0106', 'sil1116bla0106', 'sil1116brn686D', 'sil1116pea7378', 'sil1116mar292E', 'sil1116pea595E', 'brn2025bla0106', 'brn2025brn484D']
âœ… Same number of New and Old colours, with acceptable number

4 Fence Colrs: ['whi0A0Fbla0106', 'whi0A0Fbla0308', 'whi080Dbla0106', 'brn2227bla0106']
âœ… 4 Fence colours (due to hardcoding)

Feature		Num		Start	Bits	Storage
------------------------------------------------------------------
Levels		2		0		1		ðŸš«
Building	8		1		3		LOAD_TEMP(0)
Fence ðŸŽ¨	4		4		2		LOAD_TEMP(2)
*/

// Random Switches
	// Building Colours
		switch (FEAT_HOUSES, SELF, yoshizawa_build_clr_old, getbits(random_bits, 1, 3)) {
			0:	return 33;
			1:	return 34;
			2:	return 36;
			3:	return 37;
			4:	return 38;
			5:	return 39;
			6:	return 68;
				return 69;
		}
		switch (FEAT_HOUSES, SELF, yoshizawa_build_clr_new, getbits(random_bits, 1, 3)) {
			0:	return 43;
			1:	return 61;
			2:	return 62;
			3:	return 65;
			4:	return 66;
			5:	return 67;
			6:	return 68;
				return 74;
		}
	// Fence Colours
		switch (FEAT_HOUSES, SELF, yoshizawa_fence_clr, getbits(random_bits, 4, 2)) {
			0:	return 49;
			1:	return 50;
			2:	return 55;
				return 76;
		}
// Spritelayout Switches
	// f
		switch (FEAT_HOUSES,SELF, switch_yoshizawa_h_f_sprites, [
			STORE_TEMP((current_year - age) < 1959 ? yoshizawa_build_clr_old() : yoshizawa_build_clr_new(), 0),
			STORE_TEMP(yoshizawa_fence_clr(), 2),
			STORE_TEMP(Season(), 3),
			terrain_type == TILETYPE_SNOW]) 
			{1: sprlay_yoshizawa_h_f_snow; sprlay_yoshizawa_h_f_norm; }
	// g
		switch (FEAT_HOUSES,SELF, switch_yoshizawa_h_g_sprites, [
			STORE_TEMP((current_year - age) < 1959 ? yoshizawa_build_clr_old() : yoshizawa_build_clr_new(), 0),
			STORE_TEMP(yoshizawa_fence_clr(), 2),
			STORE_TEMP(Season(), 3),
			terrain_type == TILETYPE_SNOW]) 
			{1: sprlay_yoshizawa_h_g_snow; sprlay_yoshizawa_h_g_norm; }

	// Level Selection
		switch (FEAT_HOUSES, SELF, switch_yoshizawa_sprites, getbits(random_bits, 0, 1)) {
			0:	switch_yoshizawa_h_f_sprites;
				switch_yoshizawa_h_g_sprites;
		}

// Item Block
	item(FEAT_HOUSES, item_yoshizawa, 92, HOUSE_SIZE_1X1){
		property {
			substitute:					6;
			name:						string(NAME_YOSHIZAWA);
			population:					20;
			accepted_cargos:			[[PASS, 4],[MAIL, 2]];
			local_authority_impact:		80;
			removal_cost_multiplier:	80;
			probability:				5;
			years_available:			[1870,0xFFFF];
			minimum_lifetime:			5;
			availability_mask:			[bitmask(TOWNZONE_OUTER_SUBURB , TOWNZONE_OUTSKIRT, TOWNZONE_EDGE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE, CLIMATE_TROPIC)];
			building_class:				0;
			}
		graphics {
			default:					switch_yoshizawa_sprites;
			construction_check:			switch_single_house_con_check;
			cargo_production:			func_produce(2,1);
		}
	}
