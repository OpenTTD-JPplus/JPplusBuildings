
// naganuma

// Spritelayouts

	// H variant
		// F level
			// Norm
				spritelayout sprlay_naganuma_h_f_con_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_naganuma_h_f_norm (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
				}

			// Snow
				spritelayout sprlay_naganuma_h_f_con_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_naganuma_h_f_snow (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
				}

			// Norm
				spritelayout sprlay_naganuma_h_f_fin_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_naganuma_h_f_norm (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // grund
						sprite: spr_naganuma_h_f_grund_norm (construction_state); // Same as building
					}
					childsprite { // fence
						sprite: spr_naganuma_h_f_fence (construction_state); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(2);
					}
					childsprite { // trees
						sprite: spr_naganuma_h_f_trees (LOAD_TEMP(3)); // Seasonal
					}
				}

			// Snow
				spritelayout sprlay_naganuma_h_f_fin_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_naganuma_h_f_snow (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // grund
						sprite: spr_naganuma_h_f_grund_snow (construction_state); // Same as building
					}
					childsprite { // fence
						sprite: spr_naganuma_h_f_fence (construction_state); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(2);
					}
					childsprite { // trees
						sprite: spr_naganuma_h_f_trees (3); // Seasonal, but winter tree in the snow
					}
				}

		// G level
			// Norm
				spritelayout sprlay_naganuma_h_g_con_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_naganuma_h_g_norm (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
				}

			// Snow
				spritelayout sprlay_naganuma_h_g_con_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_naganuma_h_g_snow (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
				}

			// Norm
				spritelayout sprlay_naganuma_h_g_fin_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_naganuma_h_g_norm (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // grund
						sprite: spr_naganuma_h_g_grund_norm (construction_state); // Same as building
					}
					childsprite { // fence
						sprite: spr_naganuma_h_g_fence (construction_state); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(2);
					}
					childsprite { // trees
						sprite: spr_naganuma_h_g_trees (LOAD_TEMP(3)); // Seasonal
					}
				}

			// Snow
				spritelayout sprlay_naganuma_h_g_fin_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_naganuma_h_g_snow (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // grund
						sprite: spr_naganuma_h_g_grund_snow (construction_state); // Same as building
					}
					childsprite { // fence
						sprite: spr_naganuma_h_g_fence (construction_state); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(2);
					}
					childsprite { // trees
						sprite: spr_naganuma_h_g_trees (3); // Seasonal, but winter tree in the snow
					}
				}

// Construction State Switches

	switch(FEAT_HOUSES, SELF, sprlay_naganuma_h_f_norm, construction_state) {
		3: sprlay_naganuma_h_f_fin_norm;
	sprlay_naganuma_h_f_con_norm;
	}
	switch(FEAT_HOUSES, SELF, sprlay_naganuma_h_f_snow, construction_state) {
		3: sprlay_naganuma_h_f_fin_snow;
	sprlay_naganuma_h_f_con_snow;
	}
	switch(FEAT_HOUSES, SELF, sprlay_naganuma_h_g_norm, construction_state) {
		3: sprlay_naganuma_h_g_fin_norm;
	sprlay_naganuma_h_g_con_norm;
	}
	switch(FEAT_HOUSES, SELF, sprlay_naganuma_h_g_snow, construction_state) {
		3: sprlay_naganuma_h_g_fin_snow;
	sprlay_naganuma_h_g_con_snow;
	}
/*
==================
Getbits Allocation
==================
Childsprites: {'grund': {'conditions': ['single']}, 'fence': {'conditions': ['single', 'remap', 'single_climate', 'old_colours']}, 'trees': {'conditions': ['seasonal', 'variant', 'single_climate']}}

Colour Profiles: {'new': {'sum_prob': 8, 'count': 8}, 'old': {'sum_prob': 8, 'count': 8}, 'fence_new': {'sum_prob': 4, 'count': 4}, 'fence_old': {'sum_prob': 0, 'count': 0}}
	‚úÖ new colour profile has 8 unique colours, with probabilities summing to 8
	‚úÖ old colour profile has 8 unique colours, with probabilities summing to 8
	‚úÖ fence_new colour profile has 4 unique colours, with probabilities summing to 4
	‚ùå naganuma colour profile has 0 unique colours, with probabilities summing to 0

Feature		Num		Start	Bits	Storage
------------------------------------------------------------------
Levels		2		0		1		üö´
Building	8		1		3		LOAD_TEMP(0)
Fence üé®	4		2		2		LOAD_TEMP(2)
*/

// Random Switches
	// Building Colours
		switch (FEAT_HOUSES, SELF, naganuma_build_clr_new, getbits(random_bits, 1, 3)) {
			0:	return 31;
			1:	return 34;
			2:	return 55;
			3:	return 56;
			4:	return 66;
			5:	return 69;
			6:	return 73;
				return 80;
		}
		switch (FEAT_HOUSES, SELF, naganuma_build_clr_old, getbits(random_bits, 1, 3)) {
			0:	return 15;
			1:	return 22;
			2:	return 34;
			3:	return 44;
			4:	return 50;
			5:	return 58;
			6:	return 68;
				return 74;
		}
	// Fence Colours - Fence Colours Profiles: ['fence_new', 'fence_old']
		switch (FEAT_HOUSES, SELF, naganuma_fence_new, getbits(random_bits, 2, 2)) {
			0:	return 48;
			1:	return 71;
			2:	return 77;
				return 82;
		}
		switch (FEAT_HOUSES, SELF, naganuma_fence_old, getbits(random_bits, 2, 1)) {
		}
// Spritelayout Switches
	// h
		// f
			switch (FEAT_HOUSES,SELF, switch_naganuma_h_f_sprites, [
				STORE_TEMP((current_year - age) < 1959 ? naganuma_build_clr_old() : naganuma_build_clr_new(), 0),
				STORE_TEMP((current_year - age) < 1959 ? naganuma_fence_old() : naganuma_fence_new(), 2),
				STORE_TEMP(Season(), 3),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_naganuma_h_f_snow; sprlay_naganuma_h_f_norm; }
		// g
			switch (FEAT_HOUSES,SELF, switch_naganuma_h_g_sprites, [
				STORE_TEMP((current_year - age) < 1959 ? naganuma_build_clr_old() : naganuma_build_clr_new(), 0),
				STORE_TEMP((current_year - age) < 1959 ? naganuma_fence_old() : naganuma_fence_new(), 2),
				STORE_TEMP(Season(), 3),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_naganuma_h_g_snow; sprlay_naganuma_h_g_norm; }

	// Level Selection
		switch (FEAT_HOUSES, SELF, switch_naganuma_sprites, getbits(random_bits, 0, 1)) {
			0:	switch_naganuma_h_f_sprites;
				switch_naganuma_h_g_sprites;
		}

// Item Block
	item(FEAT_HOUSES, item_naganuma, 2, HOUSE_SIZE_1X1){
		property {
			substitute:					6;
			name:						string(NAME_NAGANUMA);
			population:					20;
			accepted_cargos:			[[PASS, 4],[MAIL, 2]];
			local_authority_impact:		80;
			removal_cost_multiplier:	80;
			probability:				5;
			years_available:			[1870,0xFFFF];
			minimum_lifetime:			5;
			availability_mask:			[bitmask(TOWNZONE_OUTER_SUBURB , TOWNZONE_OUTSKIRT, TOWNZONE_EDGE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE, CLIMATE_TROPIC)];
			building_class:				0;
			}
		graphics {
			default:					switch_naganuma_sprites;
			construction_check:			switch_single_house_con_check;
			cargo_production:			func_produce(2,1);
		}
	}
