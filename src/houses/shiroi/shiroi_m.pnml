
// shiroi_m

// Spritelayouts

	// A variant
		// 6L level
			// Norm
				spritelayout sprlay_shiroi_m_a_6L_norm {
					ground {
						sprite:spr_shiroi_a_ground_norm (construction_state);
					}
					building {
						sprite: spr_shiroi_m_a_6L_norm (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // roofs
						sprite: spr_shiroi_m_a_6L_roofs_norm (construction_state); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(4);
					}
				}

			// Snow
				spritelayout sprlay_shiroi_m_a_6L_snow {
					ground {
						sprite:spr_shiroi_a_ground_snow (construction_state);
					}
					building {
						sprite: spr_shiroi_m_a_6L_snow (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
				}

	// B variant
		// 6L level
			// Norm
				spritelayout sprlay_shiroi_m_b_6L_norm {
					ground {
						sprite:spr_shiroi_b_ground_norm (construction_state);
					}
					building {
						sprite: spr_shiroi_m_b_6L_norm (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // roofs
						sprite: spr_shiroi_m_b_6L_roofs_norm (construction_state); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(4);
					}
				}

			// Snow
				spritelayout sprlay_shiroi_m_b_6L_snow {
					ground {
						sprite:spr_shiroi_b_ground_snow (construction_state);
					}
					building {
						sprite: spr_shiroi_m_b_6L_snow (construction_state);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
				}

/*
==================
Getbits Allocation
==================
Childsprites: {'roofs': {'conditions': ['single', 'variant', 'norm_only', 'remap']}}

Colour Profiles: {'new': {'sum_prob': 8, 'count': 8}, 'roofs_new': {'sum_prob': 4, 'count': 4}}
	âœ… new colour profile has 8 unique colours, with probabilities summing to 8
	âœ… roofs_new colour profile has 4 unique colours, with probabilities summing to 4

Feature		Num		Start	Bits	Storage
------------------------------------------------------------------
Building	8		0		3		LOAD_TEMP(0)
Roof ðŸŽ¨		8		1		2		LOAD_TEMP(4)
*/

// Random Switches
	// Building Colours
		switch (FEAT_HOUSES, SELF, shiroi_m_build_clr_new, getbits(random_bits, 0, 3)) {
			0:	return 36;
			1:	return 37;
			2:	return 49;
			3:	return 57;
			4:	return 58;
			5:	return 69;
			6:	return 86;
				return 89;
		}
	// Roof Colours
		switch (FEAT_HOUSES, SELF, shiroi_m_roofs_new, getbits(random_bits, 1, 2)) {
			0:	return 46;
			1:	return 57;
			2:	return 58;
				return 64;
		}
// Spritelayout Switches
	// a
		// 6L
			switch (FEAT_HOUSES,SELF, switch_shiroi_m_a_sprites, [
				STORE_TEMP(shiroi_m_build_clr_new(), 0),
				STORE_TEMP(shiroi_m_roofs_new(), 4),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_shiroi_m_a_6L_snow; sprlay_shiroi_m_a_6L_norm; }

	// b
		// 6L
			switch (FEAT_HOUSES,SELF, switch_shiroi_m_b_sprites, [
				STORE_TEMP(shiroi_m_build_clr_new(), 0),
				STORE_TEMP(shiroi_m_roofs_new(), 4),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_shiroi_m_b_6L_snow; sprlay_shiroi_m_b_6L_norm; }

	// Variant Selection for ['a', 'b'] using SpriteDirectionsAB()
	
	random_switch (FEAT_HOUSES, SELF, switch_shiroi_m_random_sprites) {
		1: switch_shiroi_m_a_sprites;
		1: switch_shiroi_m_b_sprites;
	}

	switch (FEAT_HOUSES, SELF, switch_shiroi_m_south_check, SpriteDirectionsSouth()) {
		4: switch_shiroi_m_a_sprites;
		6: switch_shiroi_m_a_sprites;
		9: switch_shiroi_m_b_sprites;
		switch_shiroi_m_random_sprites;
	}

	switch (FEAT_HOUSES, SELF, switch_shiroi_m_east_check, SpriteDirectionsEast()) {
		4: switch_shiroi_m_a_sprites;
		6: switch_shiroi_m_a_sprites;
		9: switch_shiroi_m_b_sprites;
		switch_shiroi_m_random_sprites;
	}

	switch (FEAT_HOUSES, SELF, switch_shiroi_m_west_check, SpriteDirectionsWest()) {
		6: switch_shiroi_m_b_sprites;
		9: switch_shiroi_m_a_sprites;
		switch_shiroi_m_random_sprites;
	}

	switch (FEAT_HOUSES, SELF, switch_shiroi_m_north_check, SpriteDirectionsNorth()) {
		6: switch_shiroi_m_b_sprites;
		9: switch_shiroi_m_a_sprites;
		switch_shiroi_m_random_sprites;
	}

	switch (FEAT_HOUSES, SELF, switch_shiroi_m_sprites, SpriteDirections() ) {
		1: switch_shiroi_m_a_sprites;
		2: switch_shiroi_m_b_sprites;
		3: switch_shiroi_m_south_check;
		4: switch_shiroi_m_a_sprites;
		5: switch_shiroi_m_a_sprites;
		6: switch_shiroi_m_west_check;
		8: switch_shiroi_m_b_sprites;
		9: switch_shiroi_m_east_check;
		10: switch_shiroi_m_b_sprites;
		12: switch_shiroi_m_north_check;
		switch_shiroi_m_random_sprites;
	}

// Item Block
	item(FEAT_HOUSES, item_shiroi_m, 158, HOUSE_SIZE_1X1){
		property {
			substitute:					27;
			name:						string(STR_CONCAT_2, string(NAME_SHIROI),string(MEDIUM));
			population:					100;
			accepted_cargos:			[[PASS, 4],[MAIL, 2]];
			local_authority_impact:		80;
			removal_cost_multiplier:	80;
			probability:				1;
			years_available:			[1960,0xFFFF];
			minimum_lifetime:			7;
			availability_mask:			[bitmask(TOWNZONE_CENTRE, TOWNZONE_INNER_SUBURB, TOWNZONE_OUTER_SUBURB), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE, CLIMATE_TROPIC)];
			building_class:				67;
			}
		graphics {
			default:					switch_shiroi_m_sprites;
			construction_check:			switch_medium_con_check;
			cargo_production:			func_produce(10,4);
		}
	}
