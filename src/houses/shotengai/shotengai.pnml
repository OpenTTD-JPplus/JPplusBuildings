
// shotengai

// Spritelayouts

	// A variant
		// C level
			// Norm
				spritelayout sprlay_shotengai_a_c_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_shotengai_a_c_norm (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // roofs
						sprite: spr_shotengai_a_c_roofs_norm (LOAD_TEMP(5));
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(4);
					}
					childsprite { // signs
						sprite: spr_shotengai_a_c_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

			// Snow
				spritelayout sprlay_shotengai_a_c_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_shotengai_a_c_snow (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // signs
						sprite: spr_shotengai_a_c_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

		// D level
			// Norm
				spritelayout sprlay_shotengai_a_d_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_shotengai_a_d_norm (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // roofs
						sprite: spr_shotengai_a_d_roofs_norm (LOAD_TEMP(5));
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(4);
					}
					childsprite { // signs
						sprite: spr_shotengai_a_d_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

			// Snow
				spritelayout sprlay_shotengai_a_d_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_shotengai_a_d_snow (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // signs
						sprite: spr_shotengai_a_d_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

	// B variant
		// C level
			// Norm
				spritelayout sprlay_shotengai_b_c_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_shotengai_b_c_norm (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // roofs
						sprite: spr_shotengai_b_c_roofs_norm (LOAD_TEMP(5));
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(4);
					}
					childsprite { // signs
						sprite: spr_shotengai_b_c_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

			// Snow
				spritelayout sprlay_shotengai_b_c_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_shotengai_b_c_snow (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // signs
						sprite: spr_shotengai_b_c_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

		// D level
			// Norm
				spritelayout sprlay_shotengai_b_d_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_shotengai_b_d_norm (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // roofs
						sprite: spr_shotengai_b_d_roofs_norm (LOAD_TEMP(5));
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(4);
					}
					childsprite { // signs
						sprite: spr_shotengai_b_d_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

			// Snow
				spritelayout sprlay_shotengai_b_d_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_shotengai_b_d_snow (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // signs
						sprite: spr_shotengai_b_d_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

	// S variant
		// C level
			// Norm
				spritelayout sprlay_shotengai_s_c_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_shotengai_s_c_norm (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // roofs
						sprite: spr_shotengai_s_c_roofs_norm (LOAD_TEMP(5));
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(4);
					}
					childsprite { // signs
						sprite: spr_shotengai_s_c_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

			// Snow
				spritelayout sprlay_shotengai_s_c_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_shotengai_s_c_snow (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // signs
						sprite: spr_shotengai_s_c_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

		// D level
			// Norm
				spritelayout sprlay_shotengai_s_d_norm {
					ground {
						sprite:spr_ground_grass_norm;
					}
					building {
						sprite: spr_shotengai_s_d_norm (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // roofs
						sprite: spr_shotengai_s_d_roofs_norm (LOAD_TEMP(5));
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(4);
					}
					childsprite { // signs
						sprite: spr_shotengai_s_d_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

			// Snow
				spritelayout sprlay_shotengai_s_d_snow {
					ground {
						sprite:spr_ground_grass_snow;
					}
					building {
						sprite: spr_shotengai_s_d_snow (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // signs
						sprite: spr_shotengai_s_d_signs (3); // Same as building
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(6);
					}
				}

/*
==================
Getbits Allocation
==================
Childsprites: {'roofs': {'conditions': ['variant', 'norm_only', 'remap', '4choices', 'old_colours']}, 'signs': {'conditions': ['variant', 'single', 'remap', 'single_climate']}}

Colour Profiles: {'old': {'sum_prob': 16, 'count': 10}, 'new': {'sum_prob': 16, 'count': 16}, 'roofs_old': {'sum_prob': 16, 'count': 16}, 'roofs_new': {'sum_prob': 16, 'count': 16}, 'signs': {'sum_prob': 4, 'count': 4}}
	âœ… old colour profile has 10 unique colours, with probabilities summing to 16
	âœ… new colour profile has 16 unique colours, with probabilities summing to 16
	âœ… roofs_old colour profile has 16 unique colours, with probabilities summing to 16
	âœ… roofs_new colour profile has 16 unique colours, with probabilities summing to 16
	âœ… signs colour profile has 4 unique colours, with probabilities summing to 4

Feature		Num		Start	Bits	Storage
------------------------------------------------------------------
Levels		2		0		1		ðŸš«
Building	16		1		4		LOAD_TEMP(0)
Roof ðŸŽ¨		16		2		4		LOAD_TEMP(4)
Roof Var	4		3		2		LOAD_TEMP(5)
Signs ðŸŽ¨	4		4		2		LOAD_TEMP(6)
*/

// Random Switches
	// Building Colours
		switch (FEAT_HOUSES, SELF, shotengai_build_clr_old, getbits(random_bits, 1, 4)) {
			0..1:	return 36;
			2..3:	return 37;
			4..5:	return 38;
			6..7:	return 42;
			8..9:	return 43;
			10..11:	return 44;
			12:	return 81;
			13:	return 82;
			14:	return 91;
				return 92;
		}
		switch (FEAT_HOUSES, SELF, shotengai_build_clr_new, getbits(random_bits, 1, 4)) {
			0:	return 41;
			1:	return 43;
			2:	return 44;
			3:	return 52;
			4:	return 53;
			5:	return 61;
			6:	return 64;
			7:	return 65;
			8:	return 68;
			9:	return 70;
			10:	return 72;
			11:	return 82;
			12:	return 87;
			13:	return 88;
			14:	return 89;
				return 93;
		}
	// Roof Colours
		switch (FEAT_HOUSES, SELF, shotengai_roofs_old, getbits(random_bits, 2, 4)) {
			0:	return 32;
			1:	return 33;
			2:	return 34;
			3:	return 36;
			4:	return 39;
			5:	return 40;
			6:	return 42;
			7:	return 45;
			8:	return 46;
			9:	return 48;
			10:	return 49;
			11:	return 66;
			12:	return 67;
			13:	return 68;
			14:	return 73;
				return 100;
		}
		switch (FEAT_HOUSES, SELF, shotengai_roofs_new, getbits(random_bits, 2, 4)) {
			0:	return 35;
			1:	return 45;
			2:	return 51;
			3:	return 52;
			4:	return 60;
			5:	return 61;
			6:	return 62;
			7:	return 66;
			8:	return 67;
			9:	return 68;
			10:	return 72;
			11:	return 73;
			12:	return 74;
			13:	return 80;
			14:	return 81;
				return 98;
		}
	// Sign Colours
		switch (FEAT_HOUSES, SELF, shotengai_signs_clr, getbits(random_bits, 4, 2)) {
			0:	return 101;
			1:	return 102;
			2:	return 103;
				return 104;
		}
// Spritelayout Switches
	// a
		// c
			switch (FEAT_HOUSES,SELF, switch_shotengai_a_c_sprites, [
				STORE_TEMP((current_year - age) < 1959 ? shotengai_build_clr_old() : shotengai_build_clr_new(), 0),
				STORE_TEMP((current_year - age) < 1959 ? shotengai_roofs_old() : shotengai_roofs_new(), 4),
				STORE_TEMP(getbits(random_bits, 3, 2), 5),
				STORE_TEMP(shotengai_signs_clr(), 6),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_shotengai_a_c_snow; sprlay_shotengai_a_c_norm; }
		// d
			switch (FEAT_HOUSES,SELF, switch_shotengai_a_d_sprites, [
				STORE_TEMP((current_year - age) < 1959 ? shotengai_build_clr_old() : shotengai_build_clr_new(), 0),
				STORE_TEMP((current_year - age) < 1959 ? shotengai_roofs_old() : shotengai_roofs_new(), 4),
				STORE_TEMP(getbits(random_bits, 3, 2), 5),
				STORE_TEMP(shotengai_signs_clr(), 6),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_shotengai_a_d_snow; sprlay_shotengai_a_d_norm; }

	// b
		// c
			switch (FEAT_HOUSES,SELF, switch_shotengai_b_c_sprites, [
				STORE_TEMP((current_year - age) < 1959 ? shotengai_build_clr_old() : shotengai_build_clr_new(), 0),
				STORE_TEMP((current_year - age) < 1959 ? shotengai_roofs_old() : shotengai_roofs_new(), 4),
				STORE_TEMP(getbits(random_bits, 3, 2), 5),
				STORE_TEMP(shotengai_signs_clr(), 6),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_shotengai_b_c_snow; sprlay_shotengai_b_c_norm; }
		// d
			switch (FEAT_HOUSES,SELF, switch_shotengai_b_d_sprites, [
				STORE_TEMP((current_year - age) < 1959 ? shotengai_build_clr_old() : shotengai_build_clr_new(), 0),
				STORE_TEMP((current_year - age) < 1959 ? shotengai_roofs_old() : shotengai_roofs_new(), 4),
				STORE_TEMP(getbits(random_bits, 3, 2), 5),
				STORE_TEMP(shotengai_signs_clr(), 6),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_shotengai_b_d_snow; sprlay_shotengai_b_d_norm; }

	// s
		// c
			switch (FEAT_HOUSES,SELF, switch_shotengai_s_c_sprites, [
				STORE_TEMP((current_year - age) < 1959 ? shotengai_build_clr_old() : shotengai_build_clr_new(), 0),
				STORE_TEMP((current_year - age) < 1959 ? shotengai_roofs_old() : shotengai_roofs_new(), 4),
				STORE_TEMP(getbits(random_bits, 3, 2), 5),
				STORE_TEMP(shotengai_signs_clr(), 6),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_shotengai_s_c_snow; sprlay_shotengai_s_c_norm; }
		// d
			switch (FEAT_HOUSES,SELF, switch_shotengai_s_d_sprites, [
				STORE_TEMP((current_year - age) < 1959 ? shotengai_build_clr_old() : shotengai_build_clr_new(), 0),
				STORE_TEMP((current_year - age) < 1959 ? shotengai_roofs_old() : shotengai_roofs_new(), 4),
				STORE_TEMP(getbits(random_bits, 3, 2), 5),
				STORE_TEMP(shotengai_signs_clr(), 6),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_shotengai_s_d_snow; sprlay_shotengai_s_d_norm; }

	// Level Selection
		switch (FEAT_HOUSES, SELF, switch_shotengai_a_sprites, getbits(random_bits, 0, 1)) {
			0:	switch_shotengai_a_c_sprites;
				switch_shotengai_a_d_sprites;
		}

		switch (FEAT_HOUSES, SELF, switch_shotengai_b_sprites, getbits(random_bits, 0, 1)) {
			0:	switch_shotengai_b_c_sprites;
				switch_shotengai_b_d_sprites;
		}

		switch (FEAT_HOUSES, SELF, switch_shotengai_s_sprites, getbits(random_bits, 0, 1)) {
			0:	switch_shotengai_s_c_sprites;
				switch_shotengai_s_d_sprites;
		}

	// Variant Selection for ['a', 'b', 's'] using SpriteDirectionsABS()
	
	random_switch (FEAT_HOUSES, SELF, switch_shotengai_random_sprites) {
		1: switch_shotengai_a_sprites;
		1: switch_shotengai_b_sprites;
	}

	switch (FEAT_HOUSES, SELF, switch_shotengai_east_check, SpriteDirectionsEast()) {
		4: switch_shotengai_a_sprites;
		6: switch_shotengai_a_sprites;
		9: switch_shotengai_b_sprites;
		switch_shotengai_random_sprites;
	}

	switch (FEAT_HOUSES, SELF, switch_shotengai_west_check, SpriteDirectionsWest()) {
		6: switch_shotengai_b_sprites;
		9: switch_shotengai_a_sprites;
		switch_shotengai_random_sprites;
	}

	switch (FEAT_HOUSES, SELF, switch_shotengai_north_check, SpriteDirectionsNorth()) {
		6: switch_shotengai_b_sprites;
		9: switch_shotengai_a_sprites;
		switch_shotengai_random_sprites;
	}

	switch (FEAT_HOUSES, SELF, switch_shotengai_sprites, SpriteDirections() ) {
		1:  switch_shotengai_a_sprites;
		2:  switch_shotengai_b_sprites;
		3:  switch_shotengai_s_sprites;
		4:  switch_shotengai_a_sprites;
		5:  switch_shotengai_a_sprites;
		6:  switch_shotengai_west_check;
		7:  switch_shotengai_a_sprites;
		8:  switch_shotengai_b_sprites;
		9:  switch_shotengai_east_check;
		10: switch_shotengai_b_sprites;
		11: switch_shotengai_b_sprites;
		12: switch_shotengai_north_check;
		13: switch_shotengai_a_sprites;
		14: switch_shotengai_b_sprites;
		switch_shotengai_random_sprites;
	}

// Item Block
	item(FEAT_HOUSES, item_shotengai, 0, HOUSE_SIZE_1X1){
		property {
			substitute:					6;
			name:						string(NAME_SHOTENGAI);
			population:					20;
			accepted_cargos:			[[PASS, 4],[MAIL, 2], [GOOD, 2]];
			local_authority_impact:		80;
			removal_cost_multiplier:	80;
			probability:				1;
			years_available:			[1900,0xFFFF];
			minimum_lifetime:			5;
			availability_mask:			[ALL_TOWNZONES, bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE, CLIMATE_TROPIC)];
			building_class:				0;
			}
		graphics {
			default:					switch_shotengai_sprites;
			construction_check:			switch_shotengai_con_check;
			cargo_production:			func_produce(3,1);
		}
	}
