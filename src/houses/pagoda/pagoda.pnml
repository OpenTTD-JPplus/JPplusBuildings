
// pagoda

// Spritelayouts

	// H variant
		// P level
			// Norm
				spritelayout sprlay_pagoda_h_p_norm {
					ground {
						sprite:spr_ground_temple_norm;
					}
					building {
						sprite: spr_pagoda_h_p_norm (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // trees
						sprite: spr_pagoda_h_p_trees_norm (LOAD_TEMP(3)); // Seasonal
					}
				}

			// Snow
				spritelayout sprlay_pagoda_h_p_snow {
					ground {
						sprite:spr_ground_temple_snow;
					}
					building {
						sprite: spr_pagoda_h_p_snow (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // trees
						sprite: spr_pagoda_h_p_trees_snow (3); // Seasonal, but winter tree in the snow
					}
				}

		// Q level
			// Norm
				spritelayout sprlay_pagoda_h_q_norm {
					ground {
						sprite:spr_ground_temple_norm;
					}
					building {
						sprite: spr_pagoda_h_q_norm (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // trees
						sprite: spr_pagoda_h_q_trees_norm (LOAD_TEMP(3)); // Seasonal
					}
				}

			// Snow
				spritelayout sprlay_pagoda_h_q_snow {
					ground {
						sprite:spr_ground_temple_snow;
					}
					building {
						sprite: spr_pagoda_h_q_snow (3);
						recolour_mode: RECOLOUR_REMAP;
						palette: recolour_remap + LOAD_TEMP(0);
					}
					childsprite { // trees
						sprite: spr_pagoda_h_q_trees_snow (3); // Seasonal, but winter tree in the snow
					}
				}

/*
==================
Getbits Allocation
==================
Childsprites: {'trees': {'conditions': ['seasonal', 'variant']}}

Colour Profiles: {'new': {'sum_prob': 8, 'count': 7}}
	âœ… new colour profile has 7 unique colours, with probabilities summing to 8

Feature		Num		Start	Bits	Storage
------------------------------------------------------------------
Levels		2		0		1		ðŸš«
Building	8		1		3		LOAD_TEMP(0)
*/

// Random Switches
	// Building Colours
		switch (FEAT_HOUSES, SELF, pagoda_build_clr_new, getbits(random_bits, 1, 3)) {
			0:	return 42;
			1:	return 66;
			2:	return 75;
			3:	return 83;
			4:	return 85;
			5:	return 93;
				return 100;
		}
// Spritelayout Switches
	// h
		// p
			switch (FEAT_HOUSES,SELF, switch_pagoda_h_p_sprites, [
				STORE_TEMP(pagoda_build_clr_new(), 0),
				STORE_TEMP(Season(), 3),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_pagoda_h_p_snow; sprlay_pagoda_h_p_norm; }
		// q
			switch (FEAT_HOUSES,SELF, switch_pagoda_h_q_sprites, [
				STORE_TEMP(pagoda_build_clr_new(), 0),
				STORE_TEMP(Season(), 3),
				terrain_type == TILETYPE_SNOW]) 
				{1: sprlay_pagoda_h_q_snow; sprlay_pagoda_h_q_norm; }

	// Level Selection
		switch (FEAT_HOUSES, SELF, switch_pagoda_sprites, getbits(random_bits, 0, 1)) {
			0:	switch_pagoda_h_p_sprites;
				switch_pagoda_h_q_sprites;
		}

// Item Block
	item(FEAT_HOUSES, item_pagoda, 131, HOUSE_SIZE_1X1){
		property {
			substitute:					6;
			name:						string(NAME_PAGODA);
			population:					5;
			building_flags:				bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
			accepted_cargos:			[[PASS, 4]];
			local_authority_impact:		80;
			removal_cost_multiplier:	80;
			probability:				1;
			years_available:			[0,0xFFFF];
			minimum_lifetime:			50;
			availability_mask:			[ALL_TOWNZONES, bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE, CLIMATE_TROPIC)];
			building_class:				3;
			}
		graphics {
			default:					switch_pagoda_sprites;
			construction_check:			switch_shrine_prohibition_con_check;
			cargo_production:			func_produce(10,2);
		}
	}
